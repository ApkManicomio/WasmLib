using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;

namespace WasmLib.FileFormat.Instructions
{
    /// <remarks>
    /// Documentation at https://webassembly.github.io/spec/core/binary/instructions.html
    /// </remarks>
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    public enum OpCode
    {
        // Control Instructions
        [Description("unreachable")] Unreachable = 0x00,
        [Description("nop")] Nop = 0x01,
        [Description("block")] Block = 0x02,
        [Description("loop")] Loop = 0x03,
        [Description("if")] If = 0x04,
        [Description("else")] Else = 0x05,
        [Description("end")] End = 0x0B,
        [Description("br")] Br = 0x0C,
        [Description("br_if")] BrIf = 0x0D,
        [Description("br_table")] BrTable = 0x0E,
        [Description("return")] Return = 0x0F,
        [Description("call")] Call = 0x10,
        [Description("call_indirect")] CallIndirect = 0x11,

        // Parametric Instructions
        [Description("drop")] Drop = 0x1A,
        [Description("select")] Select = 0x1B,

        // Variable Instructions
        [Description("local.get")] LocalGet = 0x20,
        [Description("local.set")] LocalSet = 0x21,
        [Description("local.tee")] LocalTee = 0x22,
        [Description("global.get")] GlobalGet = 0x23,
        [Description("global.set")] GlobalSet = 0x24,

        // Memory Instructions
        [Description("i32.load")] I32Load = 0x28,
        [Description("i64.load")] I64Load = 0x29,
        [Description("f32.load")] F32Load = 0x2A,
        [Description("f64.load")] F64Load = 0x2B,
        [Description("i32.load8_s")] I32Load8S = 0x2C,
        [Description("i32.load8_u")] I32Load8U = 0x2D,
        [Description("i32.load16_s")] I32Load16S = 0x2E,
        [Description("i32.load16_u")] I32Load16U = 0x2F,
        [Description("i64.load8_s")] I64Load8S = 0x30,
        [Description("i64.load8_u")] I64Load8U = 0x31,
        [Description("i64.load16_s")] I64Load16S = 0x32,
        [Description("i64.load16_u")] I64Load16U = 0x33,
        [Description("i64.load32_s")] I64Load32S = 0x34,
        [Description("i64.load32_u")] I64Load32U = 0x35,

        [Description("i32.store")] I32Store = 0x36,
        [Description("i64.store")] I64Store = 0x37,
        [Description("f32.store")] F32Store = 0x38,
        [Description("f64.store")] F64Store = 0x39,
        [Description("i32.store8")] I32Store8 = 0x3A,
        [Description("i32.store16")] I32Store16 = 0x3B,
        [Description("i64.store8")] I64Store8 = 0x3C,
        [Description("i64.store16")] I64Store16 = 0x3D,
        [Description("i64.store32")] I64Store32 = 0x3E,

        [Description("memory.size")] MemorySize = 0x3F,
        [Description("memory.grow")] MemoryGrow = 0x40,

        // Numeric Instructions
        [Description("i32.const")] I32Const = 0x41,
        [Description("i64.const")] I64Const = 0x42,
        [Description("f32.const")] F32Const = 0x43,
        [Description("f64.const")] F64Const = 0x44,

        [Description("i32.eqz")] I32Eqz = 0x45,
        [Description("i32.eq")] I32Eq = 0x46,
        [Description("i32.ne")] I32Ne = 0x47,
        [Description("i32.lt_s")] I32LtS = 0x48,
        [Description("i32.lt_u")] I32LtU = 0x49,
        [Description("i32.gt_s")] I32GtS = 0x4A,
        [Description("i32.gt_u")] I32GtU = 0x4B,
        [Description("i32.le_s")] I32LeS = 0x4C,
        [Description("i32.le_u")] I32LeU = 0x4D,
        [Description("i32.ge_s")] I32GeS = 0x4E,
        [Description("i32.ge_u")] I32GeU = 0x4F,

        [Description("i64.eqz")] I64Eqz = 0x50,
        [Description("i64.eq")] I64Eq = 0x51,
        [Description("i64.ne")] I64Ne = 0x52,
        [Description("i64.lt_s")] I64LtS = 0x53,
        [Description("i64.lt_u")] I64LtU = 0x54,
        [Description("i64.gt_s")] I64GtS = 0x55,
        [Description("i64.gt_u")] I64GtU = 0x56,
        [Description("i64.le_s")] I64LeS = 0x57,
        [Description("i64.le_u")] I64LeU = 0x58,
        [Description("i64.ge_s")] I64GeS = 0x59,
        [Description("i64.ge_u")] I64GeU = 0x5A,

        [Description("f32.eq")] F32Eq = 0x5B,
        [Description("f32.ne")] F32Ne = 0x5C,
        [Description("f32.lt")] F32Lt = 0x5D,
        [Description("f32.gt")] F32Gt = 0x5E,
        [Description("f32.le")] F32Le = 0x5F,
        [Description("f32.ge")] F32Ge = 0x60,

        [Description("f64.eq")] F64Eq = 0x61,
        [Description("f64.ne")] F64Ne = 0x62,
        [Description("f64.lt")] F64Lt = 0x63,
        [Description("f64.gt")] F64Gt = 0x64,
        [Description("f64.le")] F64Le = 0x65,
        [Description("f64.ge")] F64Ge = 0x66,

        [Description("i32.clz")] I32Clz = 0x67,
        [Description("i32.ctz")] I32Ctz = 0x68,
        [Description("i32.popcnt")] I32Popcnt = 0x69,
        [Description("i32.add")] I32Add = 0x6A,
        [Description("i32.sub")] I32Sub = 0x6B,
        [Description("i32.mul")] I32Mul = 0x6C,
        [Description("i32.div_s")] I32DivS = 0x6D,
        [Description("i32.div_u")] I32DivU = 0x6E,
        [Description("i32.rem_s")] I32RemS = 0x6F,
        [Description("i32.rem_u")] I32RemU = 0x70,
        [Description("i32.and")] I32And = 0x71,
        [Description("i32.or")] I32Or = 0x72,
        [Description("i32.xor")] I32Xor = 0x73,
        [Description("i32.shl")] I32Shl = 0x74,
        [Description("i32.shr_s")] I32ShrS = 0x75,
        [Description("i32.shr_u")] I32ShrU = 0x76,
        [Description("i32.rotl")] I32Rotl = 0x77,
        [Description("i32.rotr")] I32Rotr = 0x78,

        [Description("i64.clz")] I64Clz = 0x79,
        [Description("i64.ctz")] I64Ctz = 0x7A,
        [Description("i64.popcnt")] I64Popcnt = 0x7B,
        [Description("i64.add")] I64Add = 0x7C,
        [Description("i64.sub")] I64Sub = 0x7D,
        [Description("i64.mul")] I64Mul = 0x7E,
        [Description("i64.div_s")] I64DivS = 0x7F,
        [Description("i64.div_u")] I64DivU = 0x80,
        [Description("i64.rem_s")] I64RemS = 0x81,
        [Description("i64.rem_u")] I64RemU = 0x82,
        [Description("i64.and")] I64And = 0x83,
        [Description("i64.or")] I64Or = 0x84,
        [Description("i64.xor")] I64Xor = 0x85,
        [Description("i64.shl")] I64Shl = 0x86,
        [Description("i64.shr_s")] I64ShrS = 0x87,
        [Description("i64.shr_u")] I64ShrU = 0x88,
        [Description("i64.rotl")] I64Rotl = 0x89,
        [Description("i64.rotr")] I64Rotr = 0x8A,

        [Description("f32.abs")] F32Abs = 0x8B,
        [Description("f32.neg")] F32Neg = 0x8C,
        [Description("f32.ceil")] F32Ceil = 0x8D,
        [Description("f32.floor")] F32Floor = 0x8E,
        [Description("f32.trunc")] F32Trunc = 0x8F,
        [Description("f32.nearest")] F32Nearest = 0x90,
        [Description("f32.sqrt")] F32Sqrt = 0x91,
        [Description("f32.add")] F32Add = 0x92,
        [Description("f32.sub")] F32Sub = 0x93,
        [Description("f32.mul")] F32Mul = 0x94,
        [Description("f32.div")] F32Div = 0x95,
        [Description("f32.min")] F32Min = 0x96,
        [Description("f32.max")] F32Max = 0x97,
        [Description("f32.copysign")] F32Copysign = 0x98,

        [Description("f64.abs")] F64Abs = 0x99,
        [Description("f64.neg")] F64Neg = 0x9A,
        [Description("f64.ceil")] F64Ceil = 0x9B,
        [Description("f64.floor")] F64Floor = 0x9C,
        [Description("f64.trunc")] F64Trunc = 0x9D,
        [Description("f64.nearest")] F64Nearest = 0x9E,
        [Description("f64.sqrt")] F64Sqrt = 0x9F,
        [Description("f64.add")] F64Add = 0xA0,
        [Description("f64.sub")] F64Sub = 0xA1,
        [Description("f64.mul")] F64Mul = 0xA2,
        [Description("f64.div")] F64Div = 0xA3,
        [Description("f64.min")] F64Min = 0xA4,
        [Description("f64.max")] F64Max = 0xA5,
        [Description("f64.copysign")] F64Copysign = 0xA6,

        [Description("i32.wrap_i64")] I32WrapI64 = 0xA7,
        [Description("i32.trunc_f32_s")] I32TruncF32S = 0xA8,
        [Description("i32.trunc_f32_u")] I32TruncF32U = 0xA9,
        [Description("i32.trunc_f64_s")] I32TruncF64S = 0xAA,
        [Description("i32.trunc_f64_u")] I32TruncF64U = 0xAB,
        [Description("i64.extend_i32_s")] I64ExtendI32S = 0xAC,
        [Description("i64.extend_i32_u")] I64ExtendI32U = 0xAD,
        [Description("i64.trunc_f32_s")] I64TruncF32S = 0xAE,
        [Description("i64.trunc_f32_u")] I64TruncF32U = 0xAF,
        [Description("i64.trunc_f64_s")] I64TruncF64S = 0xB0,
        [Description("i64.trunc_f64_u")] I64TruncF64U = 0xB1,
        [Description("f32.convert_i32_s")] F32ConvertI32S = 0xB2,
        [Description("f32.convert_i32_u")] F32ConvertI32U = 0xB3,
        [Description("f32.convert_i64_s")] F32ConvertI64S = 0xB4,
        [Description("f32.convert_i64_u")] F32ConvertI64U = 0xB5,
        [Description("f32.demote_f64")] F32DemoteF64 = 0xB6,
        [Description("f64.convert_i32_s")] F64ConvertI32S = 0xB7,
        [Description("f64.convert_i32_u")] F64ConvertI32U = 0xB8,
        [Description("f64.convert_i64_s")] F64ConvertI64S = 0xB9,
        [Description("f64.convert_i64_u")] F64ConvertI64U = 0xBA,
        [Description("f64.promote_f32")] F64PromoteF32 = 0xBB,
        [Description("i32.reinterpret_f32")] I32ReinterpretF32 = 0xBC,
        [Description("i64.reinterpret_f64")] I64ReinterpretF64 = 0xBD,
        [Description("f32.reinterpret_i32")] F32ReinterpretI32 = 0xBE,
        [Description("f64.reinterpret_i64")] F64ReinterpretI64 = 0xBF,
    }
}
